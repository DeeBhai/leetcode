/** https://leetcode.com/problems/palindrome-linked-list/ **/
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        ListNode* head_bkp = head;
        deque<int> vals;
        bool status = true;
        while(head!=NULL)
        {
            vals.push_back(head->val);
            head=head->next;
        }
        
        int l=0;
        int r=0;

        while(status && !vals.empty()){
            l = vals.front();
            vals.pop_front();
            if(!vals.empty()) {
                r = vals.back();
                vals.pop_back();
                if(l!=r)
                {
                    status = false;
                }
            }
            
        }
        return status;
    }
};